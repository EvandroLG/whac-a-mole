{"version":3,"sources":["useTimer.ts","useRandomSquare.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useTimer","startTime","useState","counter","setCounter","start","setStart","startCounter","useCallback","useEffect","timer","setInterval","clearInterval","getRandomSquare","compose","Math","floor","random","useRandomSquare","square","setSquare","interval","useRef","stopRandomSquare","current","window","isOver","App","score","setScore","startRandomSquare","updateScore","key","className","type","onClick","range","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA8BeA,EA5BE,SAACC,GAAuB,IAAD,EACRC,mBAASD,GADD,mBAC/BE,EAD+B,KACtBC,EADsB,OAEZF,oBAAS,GAFG,mBAE/BG,EAF+B,KAExBC,EAFwB,KAGhCC,EAAeC,uBAAY,WAC/BF,GAAS,GACTF,EAAWH,KACV,CAACA,IAmBJ,OAjBAQ,qBAAU,WACR,GAAKJ,EAAL,CAIA,IAAMK,EAAQC,aAAY,WACR,IAAZR,GACFS,cAAcF,GACdJ,GAAS,IAETF,EAAWD,EAAU,KAEtB,KAEH,OAAO,kBAAMS,cAAcF,OAC1B,CAACP,EAASF,EAAWI,IAEjB,CAACF,EAASI,I,QCxBbM,EAAkBC,YAAQC,KAAKC,OAAO,kBAAsB,EAAhBD,KAAKE,YAsBxCC,EApBS,WAAO,IAAD,EACAhB,oBAAU,GADV,mBACrBiB,EADqB,KACbC,EADa,KAEtBC,EAAWC,iBAAO,GAElBC,EAAmBf,uBAAY,WACnCI,cAAcS,EAASG,WACtB,IAWH,MAAO,CAACL,EATkBX,uBAAY,WACpCe,IAEAF,EAASG,QAAUC,OAAOd,aACxB,kBAAMS,EAAUP,OAChB,OAED,CAACU,IAE+BA,I,QChB/BG,G,MAAS,SAACvB,GAAD,OAAiC,IAAZA,IAqErBwB,EAnEH,WAAO,IAAD,EACUzB,mBAAS,GADnB,mBACT0B,EADS,KACFC,EADE,OAEsCX,IAFtC,mBAETC,EAFS,KAEDW,EAFC,KAEkBP,EAFlB,OAGgBvB,EAAS,IAHzB,mBAGTG,EAHS,KAGAI,EAHA,KAKVwB,EAAcvB,uBAClB,SAACwB,GAAD,OAASA,IAAQb,GAAUU,EAASD,EAAQ,KAC5C,CAACT,EAAQS,IAGLvB,EAAQG,uBAAY,WACxBD,IACAuB,IACAD,EAAS,KACR,CAACtB,EAAcuB,IAMlB,OAJArB,qBAAU,WACRiB,EAAOvB,IAAYoB,MAClB,CAACpB,EAASoB,IAGX,yBAAKU,UAAU,OACb,wBAAIA,UAAU,aAAd,gBAECP,EAAOvB,GACN,oCACE,yCACA,yBAAK8B,UAAU,aACb,iDACCL,GAEH,4BACEM,KAAK,SACLD,UAAU,iCACVE,QAAS9B,GAHX,YASF,oCACE,4BAAQ6B,KAAK,SAASD,UAAU,aAAaE,QAAS9B,GAAtD,mBAGA,yBAAK4B,UAAU,aACb,2CACCL,GAEH,yBAAKK,UAAU,YACb,0CACC9B,GAEH,yBAAK8B,UAAU,YACZG,YAAM,EAAG,GAAGC,KAAI,SAACL,GAAD,OACf,yBACEG,QAAS,kBAAMJ,EAAYC,IAC3BA,IAAKA,EACLC,UAAS,qBAAgBD,IAAQb,GAAU,6BCrDvCmB,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e14695d9.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst useTimer = (startTime: number) => {\n  const [counter, setCounter] = useState(startTime);\n  const [start, setStart] = useState(false);\n  const startCounter = useCallback(() => {\n    setStart(true);\n    setCounter(startTime);\n  }, [startTime]);\n\n  useEffect(() => {\n    if (!start) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      if (counter === 0) {\n        clearInterval(timer);\n        setStart(false);\n      } else {\n        setCounter(counter - 1);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [counter, startTime, start]);\n\n  return [counter, startCounter] as const;\n};\n\nexport default useTimer;\n","import { useState, useRef, useCallback } from 'react';\nimport { compose } from 'ramda';\n\nconst getRandomSquare = compose(Math.floor, () => Math.random() * 9);\n\nconst useRandomSquare = () => {\n  const [square, setSquare] = useState(-1);\n  const interval = useRef(0);\n\n  const stopRandomSquare = useCallback(() => {\n    clearInterval(interval.current);\n  }, []);\n\n  const startRandomSquare = useCallback(() => {\n    stopRandomSquare();\n\n    interval.current = window.setInterval(\n      () => setSquare(getRandomSquare()),\n      800\n    );\n  }, [stopRandomSquare]);\n\n  return [square, startRandomSquare, stopRandomSquare] as const;\n};\n\nexport default useRandomSquare;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport useTimer from './useTimer';\nimport useRandomSquare from './useRandomSquare';\nimport { range } from 'ramda';\nimport './App.css';\n\nconst isOver = (counter: number) => counter === 0;\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [square, startRandomSquare, stopRandomSquare] = useRandomSquare();\n  const [counter, startCounter] = useTimer(60);\n\n  const updateScore = useCallback(\n    (key) => key === square && setScore(score + 1),\n    [square, score]\n  );\n\n  const start = useCallback(() => {\n    startCounter();\n    startRandomSquare();\n    setScore(0);\n  }, [startCounter, startRandomSquare]);\n\n  useEffect(() => {\n    isOver(counter) && stopRandomSquare();\n  }, [counter, stopRandomSquare]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">Whack-A-Mole</h1>\n\n      {isOver(counter) ? (\n        <>\n          <h2>Game over</h2>\n          <div className=\"App-score\">\n            <strong>Final score: </strong>\n            {score}\n          </div>\n          <button\n            type=\"button\"\n            className=\"App-button App-button--restart\"\n            onClick={start}\n          >\n            Restart\n          </button>\n        </>\n      ) : (\n        <>\n          <button type=\"button\" className=\"App-button\" onClick={start}>\n            Start / Restart\n          </button>\n          <div className=\"App-score\">\n            <strong>Score: </strong>\n            {score}\n          </div>\n          <div className=\"App-time\">\n            <strong>Time: </strong>\n            {counter}\n          </div>\n          <div className=\"App-grid\">\n            {range(0, 9).map((key) => (\n              <div\n                onClick={() => updateScore(key)}\n                key={key}\n                className={`App-square ${key === square && 'App-square--mole'}`}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}